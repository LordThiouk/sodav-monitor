version: '3.8'

services:
  # Service principal - Backend FastAPI
  backend:
    image: python:3.9-slim
    container_name: sodav-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./data:/app/data
      - ./logs/docker/backend:/var/log/backend
      - ./requirements.txt:/app/requirements.txt
      - ./start.sh:/app/start.sh
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sodav_dev
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=8000
      - PYTHONPATH=/app
      - ACOUSTID_API_KEY=7HKKBoukZR
      - AUDD_API_KEY=a718282167d84385a8c9d1ea9f45747a
      - SECRET_KEY=a3b1c8d9e0f12a345b67890cdef1234567890abcdef1234567890abcdef12
    depends_on:
      - db
      - redis
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
    command: >
      bash -c "cd /app && 
      pip install -r requirements.txt && 
      cd /app/backend && 
      python -m uvicorn main:app --host 0.0.0.0 --port 8000"

  # Frontend React/TypeScript avec Chakra UI
  frontend:
    image: node:18-alpine
    container_name: sodav-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./logs/docker/frontend:/var/log/frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
    working_dir: /app
    command: >
      sh -c "npm install && 
      npm start"

  # Base de données PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: sodav-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/docker/postgres:/var/log/postgresql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sodav_dev
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Cache Redis
  redis:
    image: redis:alpine
    container_name: sodav-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/docker/redis:/var/log/redis
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Prometheus pour la collecte de métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: sodav-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./logs/docker/prometheus:/var/log/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Grafana pour la visualisation des métriques
  grafana:
    image: grafana/grafana:latest
    container_name: sodav-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./logs/docker/grafana:/var/log/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Node Exporter pour les métriques système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sodav-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - ./logs/docker/node-exporter:/var/log/node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Nginx pour servir l'application
  nginx:
    image: nginx:alpine
    container_name: sodav-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/docker/nginx:/var/log/nginx
    environment:
      - PORT=80
    depends_on:
      - backend
      - frontend
    networks:
      - sodav-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

networks:
  sodav-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: 