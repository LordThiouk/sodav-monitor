name: End-to-End Tests in Docker

on:
  workflow_dispatch:  # Permet de déclencher manuellement le workflow
  schedule:
    - cron: '0 0 * * 1'  # Exécute chaque lundi à minuit

jobs:
  e2e_tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and start Docker containers
      run: |
        docker compose -f docker-compose.yml up -d
      env:
        ACOUSTID_API_KEY: ${{ secrets.ACOUSTID_API_KEY }}
        AUDD_API_KEY: ${{ secrets.AUDD_API_KEY }}
    
    - name: Wait for containers to be ready
      run: |
        echo "Waiting for containers to be ready..."
        sleep 30
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-html httpx PyJWT python-jose python-multipart email-validator aiohttp pandas
    
    - name: Install required packages for tests
      run: |
        # Installer les dépendances par petits groupes pour éviter les problèmes de mémoire
        echo "Installation des dépendances de base..."
        docker exec sodav-backend pip install --no-cache-dir pytest pytest-asyncio pytest-html
        
        echo "Installation des dépendances HTTP..."
        docker exec sodav-backend pip install --no-cache-dir httpx aiohttp
        
        echo "Installation des dépendances d'authentification..."
        docker exec sodav-backend pip install --no-cache-dir PyJWT python-jose
        
        echo "Installation des dépendances de validation..."
        # Installer pydantic et pydantic-settings avec des versions compatibles
        docker exec sodav-backend pip install --no-cache-dir pydantic==1.10.8
        docker exec sodav-backend pip install --no-cache-dir pydantic-settings==0.2.5 python-multipart email-validator python-dotenv
        
        echo "Installation des dépendances de base de données..."
        docker exec sodav-backend pip install --no-cache-dir sqlalchemy psycopg2-binary redis
        
        echo "Installation des dépendances FastAPI..."
        docker exec sodav-backend pip install --no-cache-dir fastapi==0.95.2 uvicorn aiofiles
        
        echo "Installation des dépendances d'analyse de données..."
        docker exec sodav-backend pip install --no-cache-dir pandas numpy
        
        echo "Installation des dépendances de test spécifiques..."
        docker exec sodav-backend pip install --no-cache-dir coverage==7.2.7 pytest-cov==4.1.0 pytest-mock
        
        # Créer le répertoire pour les résultats de test
        docker exec sodav-backend mkdir -p /app/test_results
    
    - name: Fix indentation errors in core.py
      run: |
        # Créer un script Python pour corriger l'indentation
        cat > fix_indentation.py << 'EOF'
        #!/usr/bin/env python3
        import re
        import sys

        def fix_indentation(file_path):
            print(f"Correction de l'indentation dans {file_path}")
            
            # Lire le fichier
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # Chercher la ligne problématique
            async_def_pattern = re.compile(r'^\s*async\s+def\s+process_stream\s*\(')
            fixed_lines = []
            in_async_def = False
            needs_indentation = False
            
            for i, line in enumerate(lines):
                if async_def_pattern.match(line):
                    in_async_def = True
                    needs_indentation = True
                    fixed_lines.append(line)
                    print(f"Ligne problématique trouvée à la ligne {i+1}: {line.strip()}")
                elif in_async_def and needs_indentation and line.strip() and not line.startswith(' '):
                    # Ajouter une indentation de 4 espaces
                    fixed_lines.append('    ' + line)
                    needs_indentation = False
                    print(f"Indentation ajoutée à la ligne {i+1}")
                else:
                    fixed_lines.append(line)
            
            # Écrire le fichier corrigé
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(fixed_lines)
            
            print(f"Correction terminée pour {file_path}")

        if __name__ == "__main__":
            if len(sys.argv) != 2:
                print("Usage: python fix_indentation.py <file_path>")
                sys.exit(1)
            
            file_path = sys.argv[1]
            fix_indentation(file_path)
        EOF
        
        # Copier le script dans le conteneur
        docker cp fix_indentation.py sodav-backend:/app/
        
        # Exécuter le script dans le conteneur
        docker exec sodav-backend python /app/fix_indentation.py /app/backend/detection/audio_processor/core.py
      continue-on-error: true
    
    - name: Check for indentation errors
      run: |
        docker exec sodav-backend bash -c "cd /app && python -m pyflakes backend/detection/audio_processor/core.py"
      continue-on-error: true
    
    - name: Run detection workflow test
      run: |
        docker exec sodav-backend bash -c "cd /app && python -m pytest backend/tests/integration/test_end_to_end.py::TestEndToEnd::test_detection_workflow -v --log-cli-level=INFO --html=/app/test_results/detection_workflow_report.html"
      continue-on-error: true
    
    - name: Run report generation test
      run: |
        docker exec sodav-backend bash -c "cd /app && python -m pytest backend/tests/integration/test_end_to_end.py::TestEndToEnd::test_report_generation -v --log-cli-level=INFO --html=/app/test_results/report_generation_report.html"
      continue-on-error: true
    
    - name: Run play duration accuracy test
      run: |
        docker exec sodav-backend bash -c "cd /app && python -m pytest backend/tests/integration/test_end_to_end.py::TestEndToEnd::test_play_duration_accuracy -v --log-cli-level=INFO --html=/app/test_results/play_duration_report.html"
      continue-on-error: true
    
    - name: Run end-to-end workflow test
      run: |
        docker exec sodav-backend bash -c "cd /app && python -m pytest backend/tests/integration/test_end_to_end.py::TestEndToEnd::test_end_to_end_workflow -v --log-cli-level=INFO --html=/app/test_results/end_to_end_workflow_report.html"
      continue-on-error: true
    
    - name: Create test results directory
      run: mkdir -p test_results
    
    - name: Copy test results from container
      run: |
        docker cp sodav-backend:/app/test_results/. ./test_results/
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-reports
        path: test_results/
    
    - name: Stop Docker containers
      run: docker compose down 