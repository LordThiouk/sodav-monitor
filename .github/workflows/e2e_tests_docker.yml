name: E2E Tests with Docker

on:
  workflow_dispatch:
  repository_dispatch:
    types: [run-all-tests]
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight
  push:
    paths:
      - 'backend/**'
      - 'tests/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/e2e_tests_docker.yml'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose V2
        run: |
          # Docker Compose is now a plugin in Docker CLI
          docker compose version || {
            echo "Docker Compose V2 not available, installing..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            docker compose version
          }

      - name: Build and start Docker containers
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio PyJWT

      - name: Fix log_manager import
        run: |
          mkdir -p backend/logs/backend/logs
          if [ -f backend/logs/log_manager.py ]; then
            cp backend/logs/log_manager.py backend/logs/backend/logs/
          elif [ -f backend/logs/backend/logs/log_manager.py ]; then
            echo "log_manager.py already exists in the target location"
          else
            echo "Creating log_manager.py file..."
            cat > backend/logs/backend/logs/log_manager.py << 'EOL'
          """
          Module de gestion des logs pour SODAV Monitor.
          Implémente un gestionnaire de logs singleton pour assurer une configuration cohérente.
          """

          import logging
          import os
          import sys
          from logging.handlers import RotatingFileHandler
          from pathlib import Path
          from typing import Dict, Optional

          class LogManager:
              """
              Gestionnaire de logs singleton pour SODAV Monitor.
              Assure une configuration cohérente des logs à travers l'application.
              """

              _instance = None
              _loggers: Dict[str, logging.Logger] = {}

              def __new__(cls):
                  """Implémentation du pattern Singleton."""
                  if cls._instance is None:
                      cls._instance = super(LogManager, cls).__new__(cls)
                      cls._instance._initialized = False
                  return cls._instance

              def __init__(self):
                  """Initialise le gestionnaire de logs."""
                  if self._initialized:
                      return

                  # Créer le répertoire de logs s'il n'existe pas
                  self.log_dir = Path(os.path.dirname(os.path.abspath(__file__)))
                  os.makedirs(self.log_dir, exist_ok=True)

                  # Configurer le logger racine
                  self.root_logger = logging.getLogger("sodav_monitor")
                  self.root_logger.setLevel(logging.DEBUG)

                  # Éviter la duplication des handlers
                  if not self.root_logger.handlers:
                      # Formatter pour les fichiers
                      file_formatter = logging.Formatter(
                          '%(asctime)s:%(levelname)s:%(name)s:%(message)s',
                          datefmt='%Y-%m-%d %H:%M:%S'
                      )

                      # Formatter pour la console
                      console_formatter = logging.Formatter(
                          '%(levelname)s:%(name)s:%(message)s'
                      )

                      # Handler pour les logs généraux
                      general_log_path = os.path.join(self.log_dir, "sodav.log")
                      general_handler = RotatingFileHandler(
                          general_log_path,
                          maxBytes=10*1024*1024,  # 10 MB
                          backupCount=5
                      )
                      general_handler.setFormatter(file_formatter)
                      general_handler.setLevel(logging.INFO)

                      # Handler pour les erreurs
                      error_log_path = os.path.join(self.log_dir, "error.log")
                      error_handler = RotatingFileHandler(
                          error_log_path,
                          maxBytes=10*1024*1024,  # 10 MB
                          backupCount=5
                      )
                      error_handler.setFormatter(file_formatter)
                      error_handler.setLevel(logging.ERROR)

                      # Handler pour la console
                      console_handler = logging.StreamHandler(sys.stdout)
                      console_handler.setFormatter(console_formatter)
                      console_handler.setLevel(logging.DEBUG if self._is_development() else logging.INFO)

                      # Ajouter les handlers au logger racine
                      self.root_logger.addHandler(general_handler)
                      self.root_logger.addHandler(error_handler)
                      self.root_logger.addHandler(console_handler)

                  self._initialized = True

              def get_logger(self, name: str) -> logging.Logger:
                  """
                  Obtient un logger nommé avec la configuration appropriée.

                  Args:
                      name: Nom du logger

                  Returns:
                      Logger configuré
                  """
                  if name in self._loggers:
                      return self._loggers[name]

                  # Préfixer avec sodav_monitor pour maintenir la hiérarchie
                  full_name = f"sodav_monitor.{name}" if not name.startswith("sodav_monitor") else name
                  logger = logging.getLogger(full_name)

                  # Stocker dans le cache
                  self._loggers[name] = logger

                  return logger

              def _is_development(self) -> bool:
                  """Vérifie si l'environnement est en développement."""
                  return os.environ.get("ENV", "development").lower() == "development"
          EOL
          fi
          touch backend/logs/backend/logs/__init__.py
          touch backend/logs/backend/__init__.py

      - name: Run pre-commit hooks (non-blocking)
        run: |
          pip install pre-commit
          pre-commit run --all-files || {
            echo "::warning::Pre-commit hooks found issues, but continuing with tests"
            echo "Pre-commit issues found. These should be fixed in future commits."
          }
        continue-on-error: true

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v
        env:
          PYTHONPATH: .
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sodav_dev
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sodav_dev
          API_V1_STR: /api/v1
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'test_secret_key' }}
          ACOUSTID_API_KEY: ${{ secrets.ACOUSTID_API_KEY || 'test_acoustid_key' }}
          AUDD_API_KEY: ${{ secrets.AUDD_API_KEY || 'test_audd_key' }}

      - name: Stop Docker containers
        if: always()
        run: |
          docker compose -f docker-compose.yml down

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage-reports/
