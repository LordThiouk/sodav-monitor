---
description: ðŸ“‚ RÃ¨gle d'Organisation des Fichiers pour le Projet
globs: *
---
Voici une rÃ¨gle claire pour **organiser les fichiers du projet** afin d'amÃ©liorer la lisibilitÃ© et la structure du code :
A chaque fois tu fera des changements concernant cette rÃ¨gle tu vas update le fichier REORGANISATION.md pour briefer ce que tu as fais.
---

### ðŸ“‚ **RÃ¨gle d'Organisation des Fichiers pour le Projet**

1. âœ… **Regrouper les Fichiers Par FonctionnalitÃ©**
   - Diviser les fichiers en dossiers selon leur fonctionnalitÃ© principale pour Ã©viter d'encombrer les rÃ©pertoires.

---

2. âœ… **Structure du Projet ClarifiÃ©e**

```
/sodav_monitor/
â”‚
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ detection/              # Logique de dÃ©tection
â”‚   â”‚   â”œâ”€â”€ local_detection.py
â”‚   â”‚   â”œâ”€â”€ musicbrainz_detection.py
â”‚   â”‚   â”œâ”€â”€ audd_detection.py
â”‚   â”‚
â”‚   â”œâ”€â”€ processing/             # Traitement des donnÃ©es
â”‚   â”‚   â”œâ”€â”€ fingerprint_handler.py
â”‚   â”‚   â”œâ”€â”€ playtime_tracker.py
â”‚   â”‚
â”‚   â”œâ”€â”€ reports/                # Gestion des rapports
â”‚   â”‚   â”œâ”€â”€ generate_report.py
â”‚   â”‚   â”œâ”€â”€ subscription_handler.py
â”‚   â”‚
â”‚   â”œâ”€â”€ logs/                   # Gestion des logs
â”‚   â”‚   â”œâ”€â”€ error_logger.py
â”‚   â”‚   â”œâ”€â”€ detection_logs.py
â”‚   â”‚
â”‚   â”œâ”€â”€ analytics/              # DonnÃ©es analytiques
â”‚   â”‚   â”œâ”€â”€ stats_calculator.py
â”‚   â”‚   â”œâ”€â”€ analytics_report.py
â”‚   â”‚
â”‚   â”œâ”€â”€ models/                 # ModÃ¨les de la base de donnÃ©es
â”‚   â”‚   â”œâ”€â”€ track.py
â”‚   â”‚   â”œâ”€â”€ station.py
â”‚   â”‚   â”œâ”€â”€ detection.py
â”‚   â”‚   â”œâ”€â”€ report.py
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/                  # Fonctions utilitaires
â”‚   â”‚   â”œâ”€â”€ auth.py
â”‚   â”‚   â”œâ”€â”€ config.py
â”‚   â”‚
â”‚   â”œâ”€â”€ tests/                  # Tests unitaires
â”‚   â”‚   â”œâ”€â”€ test_detection.py
â”‚   â”‚   â”œâ”€â”€ test_reports.py
â”‚   â”‚   â”œâ”€â”€ test_fingerprint.py
â”‚   â”‚
â”‚   â”œâ”€â”€ main.py                 # Point d'entrÃ©e de l'application
â”‚   â””â”€â”€ config.py               # Configuration gÃ©nÃ©rale
â”‚
â”œâ”€â”€ frontend/                   # Frontend React/Next.js
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ theme/
â”‚   â”‚   â”œâ”€â”€ utils/
â”‚   â”‚
â”‚   â””â”€â”€ public/
â”‚
â”œâ”€â”€ scripts/                    # Scripts divers
â”‚   â”œâ”€â”€ init_db.py
â”‚   â”œâ”€â”€ migrate_data.py
â”‚
â”œâ”€â”€ docker/                     # Fichiers Docker
â”‚   â”œâ”€â”€ Dockerfile
â”‚   â”œâ”€â”€ nginx.conf
â”‚
â”œâ”€â”€ requirements.txt            # DÃ©pendances Python
â”œâ”€â”€ README.md                   # Documentation principale
â””â”€â”€ .env.example                # Variables d'environnement
```

---

3. âœ… **Fusionner les Fichiers Redondants**
   - Regrouper les petits fichiers trop similaires sous un seul fichier.

---

4. âœ… **Nettoyer les Fichiers ObsolÃ¨tes**
   - Supprimer les anciens scripts inutilisÃ©s et archiver les anciens fichiers dans un dossier `/legacy/` si nÃ©cessaire.

---

5. âœ… **Nommer les Fichiers de ManiÃ¨re CohÃ©rente**
   - Utiliser des noms explicites en anglais et en minuscules avec des underscores (`snake_case`).

   âœ… Mettre en Place des Limites de Taille de Fichier
Limiter chaque fichier Ã  500 lignes maximum
Diviser les fichiers trop longs en modules supplÃ©mentaires


---

Voulez-vous que je mette en place une feuille de route pour appliquer cette nouvelle organisation dans votre projet ? ðŸš€